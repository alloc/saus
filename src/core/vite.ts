import * as vite from 'vite'
import { ClientDescription } from './client'
import { SausContext } from './context'

export { vite }

export interface SausConfig {
  /**
   * Path to the module containing `render` calls.
   */
  render: string
  /**
   * Path to the module containing `route` calls.
   */
  routes: string
  /**
   * Assume this page path when using the default route in build mode
   * and SSR mode.
   * @default "/404"
   */
  defaultPath?: string
  /**
   * Options for the SSR bundle generated by `saus bundle`.
   */
  bundle?: {
    /**
     * Path to the module bundled by the `saus bundle` command.
     * It should import `saus/bundle` (and optionally `saus/paths`)
     * to render pages on-demand and/or ahead-of-time.
     */
    entry?: string
    /**
     * For serverless functions, you'll want to set this to `"worker"`.
     * @default "script"
     */
    type?: 'script' | 'worker'
    /**
     * The module format of the generated SSR bundle.
     * @default "cjs"
     */
    format?: 'esm' | 'cjs'
  }
  /**
   * Options for the client modules.
   */
  client?: {
    /**
     * Set `build.target` for client modules.
     * @default "modules"
     */
    target?: vite.BuildOptions['target']
  }
  /**
   * Renderer packages need to add their `defineClient` object
   * to this array, so the SSR bundler can prepare build artifacts
   * used by the SSR bundle to generate client modules.
   */
  clients?: ClientDescription[]
}

declare module 'vite' {
  interface UserConfig {
    saus?: SausConfig
  }
}

export interface UserConfig extends vite.UserConfig {
  filterStack?: (source: string) => boolean
  saus: SausConfig
}

export interface BuildOptions extends vite.BuildOptions {
  maxWorkers?: number
  force?: boolean
}

export const defineConfig = (
  config:
    | UserConfig
    | Promise<UserConfig>
    | ((env: vite.ConfigEnv) => UserConfig | Promise<UserConfig>)
) => vite.defineConfig(config)

export interface Plugin extends vite.Plugin {
  /** Called when routes and/or render hooks are updated */
  contextUpdate?: (context: SausContext) => void
}

export type SourceDescription = Extract<
  Exclude<ReturnType<Exclude<vite.Plugin['load'], void>>, Promise<any>>,
  object
>
