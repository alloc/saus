import path from 'path'
import { renderPageState } from '../../core/renderPageState'
import { renderStateModule } from '../../core/renderStateModule'
import { createPageFactory } from '../../pages'
import { getPageFilename } from '../../utils/getPageFilename'
import { parseImports } from '../../utils/imports'
import { isCSSRequest } from '../../utils/isCSSRequest'
import { getPreloadTagsForModules } from '../../utils/modulePreload'
import { ParsedUrl, parseUrl } from '../../utils/url'
import { ssrClearCache, ssrRequire } from '../ssrModules'
import { ClientModule, RenderedPage, RenderPageOptions } from '../types'
import config from './config'
import { ssrRoutesId } from './constants'
import { context } from './context'
import { applyHtmlProcessors, endent } from './core'
import functions from './functions'
import { getModuleUrl } from './getModuleUrl'
import { HtmlTagDescriptor, injectToBody, injectToHead } from './html'
import moduleMap from './modules'
import { loadRenderers } from './render'

const getModule = (id: string) =>
  moduleMap[id] || Object.values(moduleMap).find(module => module.id == id)

const hydrateImport = `import { hydrate } from "saus/client"`
const pageFactory = createPageFactory(
  context,
  functions,
  config,
  // Load the routes module.
  () => ssrRequire(ssrRoutesId)
)

type InternalPage = import('../../pages/types').RenderedPage

export async function renderPage(
  pageUrl: string | ParsedUrl,
  { renderStart, renderFinish }: RenderPageOptions = {}
): Promise<RenderedPage | null> {
  if (!pageUrl.startsWith(config.base)) {
    return null
  }

  pageUrl = pageUrl.slice(config.base.length - 1)
  if (typeof pageUrl == 'string') {
    pageUrl = parseUrl(pageUrl)
  }

  const pagePath = pageUrl.path

  let page: InternalPage | null = null
  try {
    page = await pageFactory.render(pageUrl, {
      renderStart,
      // Prepare the page context with isolated modules.
      async setup(pageContext) {
        ssrClearCache()
        context.renderers = []
        context.defaultRenderer = undefined
        context.beforeRenderHooks = []
        await loadRenderers(pagePath)
        Object.assign(pageContext, context)
      },
    })
  } catch (error: any) {
    if (renderFinish) {
      renderFinish(pagePath, error)
      return null
    }
    throw error
  }
  if (!page) {
    renderFinish?.(pagePath, null, null)
    return null
  }

  const filename = getPageFilename(pagePath)

  const seen = new Set<ClientModule>()
  const modules = new Set<ClientModule>()
  const assets = new Set<ClientModule>()

  const addModule = (id: string) => {
    const module = getModule(id)
    if (!module) {
      console.warn(`Unknown module "${id}" was imported`)
      return null
    }
    if (seen.has(module)) {
      return module
    }
    seen.add(module)
    module.imports?.forEach(addModule)
    if (module.id.endsWith('.js')) {
      modules.add(module)
    } else {
      assets.add(module)
    }
    return module
  }

  const headTags: HtmlTagDescriptor[] = []
  const bodyTags: HtmlTagDescriptor[] = []

  const routeModule = addModule(page.routeModuleId)!
  const entryId = page.client
    ? path.join(config.assetsDir, page.client.id)
    : null!

  // The entry module is generated by the renderer package. It contains logic
  // from the render hooks used to pre-render *and* hydrate this page.
  const entryModule: ClientModule | undefined = page.client && {
    id: entryId,
    text: page.client.code,
  }

  // No point in loading any JS if no entry module exists.
  if (entryModule) {
    const entryImports = new Set<string>()
    entryModule.text = rewriteImports(entryModule, entryImports)
    entryModule.imports = Array.from(entryImports)
    entryModule.imports.forEach(addModule)
    modules.add(entryModule)

    // The "page state module" initializes the global state cache with any
    // state modules used by the route module or entry module. It also
    // provides the top-level state of the `RenderRequest` object.
    const pageStateId = filename + '.js'
    modules.add({
      id: pageStateId,
      text: renderPageState(
        page,
        config.base,
        addModule('helpers')!.id,
        // Anything imported by either the route module or the entry module is
        // pre-loaded by the page state module to speed up page navigation.
        getPreloadList([routeModule, entryModule])
      ),
      exports: ['default'],
      get imports() {
        return parseImports(this.text).map(
          importDecl => importDecl.source.value
        )
      },
    })

    for (const stateId of [...page.stateModules].reverse()) {
      const stateModuleId = 'state/' + stateId + '.js'
      modules.add({
        id: stateModuleId,
        text: renderStateModule(
          stateId,
          context.loadedStateCache.get(stateId),
          config.base + config.stateCacheUrl
        ),
        exports: ['default'],
      })
    }

    // The hydrating module is inlined.
    const hydrateModule = moduleMap[hydrateImport]
    hydrateModule.imports?.forEach(addModule)

    // Hydrate the page. The route module is imported dynamically to ensure
    // it's executed *after* the page state module is.
    const routeModuleUrl = getModuleUrl(routeModule)
    const entryModuleUrl = getModuleUrl(entryModule)
    bodyTags.push({
      tag: 'script',
      attrs: { type: 'module' },
      children: endent`
        import pageState from "${config.base + pageStateId}"
        ${hydrateModule.text}

        Promise.all([
          import("${routeModuleUrl}"),
          import("${entryModuleUrl}")
        ]).then(([routeModule]) =>
          hydrate(pageState, routeModule, "${routeModuleUrl}")
        )
      `,
    })
  }

  getPreloadTagsForModules(Array.from(modules, getModuleUrl), headTags)
  getTagsForAssets(assets, headTags)

  let html = injectToHead(page.html, headTags)
  if (bodyTags.length) {
    html = injectToBody(html, bodyTags)
  }

  return applyHtmlProcessors(
    html,
    { page, config, assets },
    context.htmlProcessors?.post || []
  ).then(html => {
    const finishedPage: RenderedPage = {
      id: filename,
      html,
      modules,
      assets,
      files: page!.files,
    }
    renderFinish?.(pagePath, null, finishedPage)
    return finishedPage
  })
}

function rewriteImports(importer: ClientModule, imported: Set<string>): string {
  const splices: Splice[] = []
  for (const importStmt of parseImports(importer.text)) {
    const source = importStmt.source.value

    let resolvedUrl = source.startsWith(config.base) && source
    let resolvedId = resolvedUrl && resolvedUrl.replace(config.base, '')

    const module =
      (resolvedId && getModule(resolvedId)) || moduleMap[importStmt.text]

    if (!module) {
      console.warn(`Unknown module "${source}" imported by "${importer.id}"`)
      continue
    }
    if (module.exports) {
      if (!resolvedId) {
        resolvedUrl = getModuleUrl(module)
        resolvedId = resolvedUrl.replace(config.base, '')
        splices.push([
          importStmt.source.start,
          importStmt.source.end,
          resolvedUrl,
        ])
      }
      moduleMap[resolvedId] = module
      imported.add(module.id)
    } else {
      // Modules that export nothing are inlined.
      const text = module.imports
        ? rewriteImports(module, imported)
        : module.text

      splices.push([importStmt.start, importStmt.end, text])
    }
  }
  return applySplices(importer.text, splices)
}

type Splice = [start: number, end: number, replacement: string]

function applySplices(text: string, splices: Splice[]) {
  let cursor = text.length
  splices.reverse().forEach((splice, i) => {
    const end = Math.min(splice[1], cursor)
    cursor = splice[0]
    text = text.slice(0, cursor) + splice[2] + text.slice(end)
  })
  return text
}

function getPreloadList(entries: (ClientModule | undefined)[]): string[] {
  const preloadList: string[] = []
  const modules = new Set(entries)
  modules.forEach(module => {
    if (module) {
      preloadList.push(module.id)
      module.imports?.forEach(id => {
        modules.add(getModule(id))
      })
    }
  })
  return preloadList
}

function getTagsForAssets(
  assets: Iterable<ClientModule>,
  headTags: HtmlTagDescriptor[]
) {
  for (const asset of assets) {
    const url = config.base + asset.id
    if (isCSSRequest(url)) {
      headTags.push({
        tag: 'link',
        attrs: {
          rel: 'stylesheet',
          href: url,
        },
      })
    } else {
      // TODO: preload other assets
    }
  }
}
